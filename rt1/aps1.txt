
###
#  Prerequisite:
#    - vagrant plugin install vagrant-vbguest vagrant-nfs_guest vagrant-bindfs vagrant-proxyconf
#    - mkdir ./Project  # this dir get mounted on box Variable 'MOUNTDIR' 
#
## way to install in GITBASH 
# export http_proxy='http...'
# export https_proxy='http...'
#  vagrant plugin install vagrant-vbguest vagrant-windows-guest-nfs vagrant-bindfs vagrant-proxyconf --plugin-source http://rubygems.org/
#-- OR --
#  vagrant plugin install https://rubygems.org/downloads/vagrant-vbguest-0.11.0.gem
#  vagrant plugin install https://rubygems.org/downloads/vagrant-windows-guest-nfs-0.2.gem
#  vagrant plugin install https://rubygems.org/downloads/vagrant-bindfs-1.1.8.gem
#  vagrant plugin install https://rubygems.org/downloads/vagrant-proxyconf-2.0.10.gem
#-- OR -- Downloead then and install 
#  vagrant plugin install /c/Users/<user>/Downloads/vagrant-vbguest-0.11.0.gem 
#  vagrant plugin install /c/Users/<user>/Downloads/vagrant-windows-guest-nfs-0.2.gem
#  vagrant plugin install /c/Users/<user>/Downloads/vagrant-bindfs-1.1.8.gem
#-- Verify 
# vagrant plugin list
### 
# vagrant validate 
# vagrant up <vm-name>
# vagrant provision  <vm-name>
# vagrant ssh  <vm-name>
###

###
## Variabels 
SHAREDIR='Project'
IMG_CentOS7 = "centos/7"
IMG_CentOS6 = "centos/6"
IPRANGE='192.168.8.11' # your VirtualBox network IPRANGE+counter{1..}
DISK='12GB' # not in use currently ..
CPU=1
RAM=512
ROOTPSW='x'
EXTRAUSER='sks'
EXTRAUSRPSW='xx'

#
BASICPKGS="vim zip unzip rsync wget curl telnet bind-utils net-tools sysstat dos2unix tree "
PACKER_URL='https://releases.hashicorp.com/packer/1.5.6/packer_1.5.6_linux_amd64.zip'
TERRAFORM_URL='https://releases.hashicorp.com/terraform/0.13.4/terraform_0.13.4_linux_amd64.zip'

# Set web proxy
proxy='Yes'
proxyurl='http://genproxy:8080'
proxyusr=''
proxypsw=''

vms = ["ansible-101:IMG_CentOS7:2:4000", "test-101:IMG_CentOS7"] # , "test-201:IMG_CentOS6"]
COUNT = vms.length - 1

Vagrant.configure("2") do |config|

    # set proxy 
    if proxy.casecmp('YES').zero?
        proxyurlb="#{proxyurl}"
        #if defined?(proxyusr) and defined?(proxypsw)
        if (!proxyusr.nil?) and (!proxyusr.empty?) and (!proxypsw.nil?) and (!proxypsw.empty?)
            proxyurl ["//"] = "//#{proxyusr}:#{proxypsw}@"
        end
        config.proxy.http     = "#{proxyurl}"
        config.proxy.https    = "#{proxyurl}"
        config.proxy.no_proxy = "localhost,127.0.0.1"
    end 
    
    # create vms 
    (0..COUNT).each do |cnt|
        
        vminfo = vms[cnt].split(':')
        vmname = vminfo[0]
        vmimg  = eval(vminfo[1])
        vmcpu  = vminfo[2]
        vmram  = vminfo[3]
        
        if vmcpu.nil?
            vmcpu = CPU
        end 
        if vmram.nil?
            vmram = RAM
        end
        if vmimg.nil?
            vmimg = IMG_CentOS7
        end
        
        config.vm.define vminfo[0] do |vc|
            # Image 
            vc.vm.box = vmimg
            
            vc.vm.provider "virtualbox" do |vb|
                vb.name   = vmname
                vb.cpus   = vmcpu
                vb.memory = vmram
            end
            
            # Sync Local Project Dir to guest on ansible node
            if vmname.include?('ansible')
                config.vm.synced_folder "./#{SHAREDIR}/", "/#{SHAREDIR}"
            end
            
            ## Setup
            ipaddr = "#{IPRANGE}#{cnt + 1}"
            vc.vm.network :private_network, ip: "#{ipaddr}"
            #vc.vm.network "public_network", type: "dhcp", bridge: "eth1"
            
            if vmimg.include? '7'
                vc.vm.hostname = vmname
            end
            
            ## Execute Shell Command # node default vagrant all run as sudo by vagrant user so no need of sudo 
            vc.vm.provision "shell", inline: <<-SHELL
            
                #systemctl reload network 
                
                ## set hostname if rhel6 as vagrant failed it for rhel 6 version 
                if [[ "#{vmimg}" =~ 6 ]]; then
                    if grep ^HOSTNAME /etc/sysconfig/network; then
                        sed -i "s/HOSTNAME=.*/HOSTNAME=#{vmname}/g" /etc/sysconfig/network
                    else
                        echo -e HOSTNAME="#{vmname}" >> /etc/sysconfig/network
                    fi 
                fi 
                hostname "#{vmname}"
                
                ## ssh config 
                SSHD='/etc/ssh/sshd_config'
                # permit password auth 
                if grep ^PasswordAuthentication $SSHD; then
                    sed -i 's/PasswordAuthentication.*/PasswordAuthentication yes/g' $SSHD
                else
                    echo 'PasswordAuthentication yes' >>  $SSHD 
                fi
                # permit root login 
                if grep ^PermitRootLogin $SSHD; then
                    sed -i 's/PermitRootLogin.*/PermitRootLogin yes/g' $SSHD
                else
                    echo 'PermitRootLogin yes' >> $SSHD # enable password login
                fi
                service sshd restart
                
                ## set root passwd and create a local user with full sudo 
                if [[ ! -z "#{ROOTPSW}" ]] ; then 
                    echo "#{ROOTPSW}" | passwd root --stdin                                                                            # set root password 
                fi
                if [[ ! -z "#{EXTRAUSER}" && ! -z "#{EXTRAUSRPSW}" ]] ; then 
                    id "#{EXTRAUSER}" >/dev/null || useradd -m -p "#{EXTRAUSRPSW}" -s /bin/bash "#{EXTRAUSER}"                          # add user sks 
                    grep "#{EXTRAUSER}" >/dev/null || echo "#{EXTRAUSER} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/#{EXTRAUSER}          # full to user
                fi 
                
                ## Set Generic and yum proxy
                #if [[ "#{proxy}" == 'Yes' ]]; then
                #    # bashrc
                #    BASHRC='/etc/bashrc'
                #    grep ^http_proxy  $$BASHRC || ( sed -e '^/http_proxy.*//g'  $BASHRC ; echo "export http_proxy=#{proxyurl}"  >> $BASHRC)
                #    grep ^https_proxy $$BASHRC || ( sed -e '^/https_proxy.*//g' $BASHRC ; echo "export https_proxy=#{proxyurl}" >> $BASHRC)
                #    source $BASHRC
                #    
                #    # yum.conf
                #    YUMCONF='/etc/yum.conf'
                #    #chattr -i $YUMCONF
                #    grep "#{proxyurlb}" $YUMCONF || ( sed -e '^/proxy.*//g'          $YUMCONF ; echo "proxy=#{proxyurlb}"         >> $YUMCONF)
                #    grep "#{proxyusr}"  $YUMCONF || ( sed -e '^/proxy_username.*//g' $YUMCONF ; echo "proxy_username=#{proxyusr}" >> $YUMCONF)
                #    grep "#{proxypsw}"  $YUMCONF || ( sed -e '^/proxy_password.*//g' $YUMCONF ; echo "proxy_password=#{proxypsw}" >> $YUMCONF)
                #    #chattr +i $YUMCONF
                #fi
                #sleep 2 
                
                ## Install Basic packages 
                if ! rpm -qa | grep epel-release >/dev/null;  then 
                    yum -y install epel-release >/dev/null && echo Installed epel-release successfully... && yum clean all >/dev/null ; yum repolist >/dev/null
                fi 
                
                echo "yum -y install #{BASICPKGS} "  # Install PKGS 
                yum -y install #{BASICPKGS} >/dev/null  && echo Installed #{BASICPKGS} ...
                
                # Install ansible, packer & terraform
                if [[ "#{vmname}" =~ 'ansible' ]]; then
                    # ansible
                    yum -y install ansible >/dev/null && echo Installed ansible ...
                    
                    # packer 
                    if ! ls /usr/local/bin/packer; then 
                        echo installing packer in /usr/local/bin/packer ...
                        wget -q -nv #{PACKER_URL} -O /tmp/packer.zip >/dev/null
                        sleep 2
                        [[ -f /tmp/packer.zip ]] && unzip /tmp/packer.zip -d /usr/local/bin/ >/dev/null
                        ls /usr/local/bin/packer >/dev/null && /usr/local/bin/packer version && echo 'Successfully .. Installed packer' || echo 'Failed to install packer'
                    fi 
                    
                    # install terraform 
                    if ! ls /usr/local/bin/terraform; then 
                        echo installing terraform in /usr/local/bin/terraform ...
                        wget -q -nv #{TERRAFORM_URL}  -O /tmp/terraform.zip >/dev/null
                        sleep 2
                        [[ -f /tmp/terraform.zip ]] && unzip /tmp/terraform.zip -d /usr/local/bin/ >/dev/null
                        ls /usr/local/bin/terraform >/dev/null && /usr/local/bin/terraform version && echo 'Successfully .. Installed terraform' || echo 'Failed to install terraform'
                    fi
                    #
                fi 
            SHELL
            # Run Shell 
            #vc.vm.provision :shell, inline: "echo VM - #{cnt}"
        end
    end
end

## END 
### proxy set widnows
# set http_proxy={PROXY_SCHEME}{PROXY_IP}:{PROXY_PORT}
# set https_proxy={PROXY_SCHEME}{PROXY_IP}:{PROXY_PORT}
